<?xml version="1.0"?>
<launch>
  <arg name="competition_mode" value="$(optenv ARIAC_COMPETITION false)" />

  <arg name="limited" default="@('true' if joint_limited_ur10 else 'false')" />
  <arg name="gui" default="true"/>
  <arg name="debug" default="false"/>
  <arg name="verbose" default="false"/>
  <arg name="gazebo_ros_output" default="screen"/>
  <arg name="world_path" />
  <arg name="gear_urdf_xacro" />
  <arg name="gantry_urdf_xacro"/>
  <arg name="kitting_urdf_xacro"/>
  <arg name="state_log_dir" value="$(env HOME)/.ariac/log/gazebo" />
  <arg name="load_moveit" default="false"/>
  <!-- run startup script -->
  <node name="startup_ariac" pkg="nist_gear" type="startup.sh" output="screen" />

  <arg unless="$(arg competition_mode)" name="enable_gz_ros_network" value="true"/>
  <arg     if="$(arg competition_mode)" name="enable_gz_ros_network" value="false"/>
  <!-- startup simulated world -->
  <include file="$(find nist_gear)/launch/empty_world.launch">
    <arg name="world_name" default="$(arg world_path)"/>
    <!-- Always start paused because the arm spawn needs it that way. -->
    <arg name="paused" value="true"/>
    <arg name="enable_ros_network" value="$(arg enable_gz_ros_network)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="extra_gazebo_args" value="@('-r --record_period 0.01 --record_path=$(arg state_log_dir)' if options['gazebo_state_logging'] else '')" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="verbose" value="$(arg verbose)" />
    <arg name="output" value="$(arg gazebo_ros_output)" />
  </include>

  <!-- load the URDF excluding the robot arm model -->
  <param name="sensors_description"
    command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg gear_urdf_xacro)'" />

  <!-- publish transforms of bins/sensors/rail-->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="sensors_tf_publisher">
    <remap from="robot_description" to="sensors_description" />
    <param name="publish_frequency" type="double" value="50.0" />
    <param name="tf_prefix" type="string" value="" />
  </node>



  <group ns="ariac/gantry">
  <!-- <param name="tf_prefix" value="gantry_tf" /> -->
    <include file="$(find nist_gear)/launch/gantry.launch">
        <arg name="gantry_urdf_xacro" value="$(arg gantry_urdf_xacro)"/>
        <arg name="limited" value="$(arg limited)"/>
    </include>
    <include file="$(find gantry_moveit_config)/launch/move_group.launch" if="$(arg load_moveit)">
        <arg name="load_robot_description" value="False"/>
    </include>
  </group>



    <group ns="ariac/kitting">
    <!-- <param name="tf_prefix" value="kitting_tf" /> -->
    <include file="$(find nist_gear)/launch/kitting.launch">
    <arg name="kitting_urdf_xacro" value="$(arg kitting_urdf_xacro)"/>
     <arg name="limited" value="$(arg limited)" />
    </include>
    <include file="$(find kitting_moveit_config)/launch/move_group.launch" if="$(arg load_moveit)">
        <arg name="load_robot_description" value="False"/>
    </include>
  </group>


  <!-- spawn sensors -->
  <node name="spawn_gazebo_sensors" pkg="gazebo_ros" type="spawn_model"
        args="
          -gazebo_namespace /gazebo
          -urdf
          -param sensors_description
          -model gear_objects
          -x 0.0
          -y 0.0
          -z 0.0"
        respawn="false" output="screen">
  </node>
  

  @[if options['spawn_extra_models']]@
    <!-- spawn any other models -->
  @[for model_name, model in models_to_spawn.items()]@
  @{
initial_pose_string = \
  ' '.join([val for pair in zip(['-x', '-y', '-z'], model.pose.xyz) for val in pair]) + " " + \
  ' '.join([val for pair in zip(['-R', '-P', '-Y'], model.pose.rpy) for val in pair])
  }@

    <node name="nist_gear_spawn_@(model_name.replace('|', '_'))" pkg="gazebo_ros" type="spawn_model"
      args="
        -file $(find nist_gear)/models/@(model.type)_ariac/model.sdf
        -sdf
        -reference_frame @(model.reference_frame)
        @(initial_pose_string)
        -model @(model_name)" />
  @[end for]@
  @[end if]@

  <node name="gazebo_unpauser" pkg="nist_gear" type="gazebo_unpauser.py" output="screen"/>

</launch>
