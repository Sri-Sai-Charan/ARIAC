<?xml version="1.0" ?>

<robot name="gantry" xmlns:xacro="http://ros.org/wiki/xacro">
  <xacro:include filename="$(find nist_gear)/robots/ur10/ur_description/urdf/ur10.urdf.macro.xacro"/>
  <xacro:include filename="$(find nist_gear)/robots/ur10/ur_description/urdf/ur.transmission.xacro" />
  <xacro:include filename="$(find nist_gear)/robots/vacuum_gripper/vacuum_gripper.urdf.xacro" />
  <!-- Import Rviz colors -->
  <xacro:include filename="$(find nist_gear)/robots/gantry/gantry_description/urdf/materials.xacro" />


  <!-- Begin: Torso Properties -->
  <!-- conversions -->
  <!-- I couldn't make the simulation work with realistic values, so I tweaked the conversion values -->
  <xacro:property name="mm_to_m" value="0.001"/>
  <xacro:property name="mm2_to_m2" value="0.000001"/>
  <xacro:property name="gr_to_Kg" value="0.001"/>

  <!-- not so negligible, otherwise simulation fails -->
  <xacro:property name="torso_mass" value="${20000*gr_to_Kg}"/>

  <!-- End: Torso Properties -->

  <!-- Rail Properties -->
  <xacro:property name="long_rail_length" value="15.0" />
  <xacro:property name="long_rail_width" value="0.2" />
  <xacro:property name="long_rail_offset" value="-5" />
  <xacro:property name="small_rail_length" value="10.0" />
  <xacro:property name="small_rail_width" value="0.2" />
  <xacro:property name="rail_height" value="2.9" />
  <xacro:property name="rail_thickness" value="0.1" />
  <xacro:property name="torso_height" value="-2.3" />

  <xacro:property name="gantry_arm" value="gantry_arm_" />

  <link name="world" />

  <!--Information on the rails-->
  <link name='long_rail_1'>
    <collision>
      <origin xyz="${-small_rail_length / 2 + long_rail_width / 2} ${long_rail_offset} ${rail_height}" rpy="0 0 0"/>
      <geometry>
        <box size="${long_rail_width} ${long_rail_length} ${rail_thickness}"/>
      </geometry>
    </collision>
    <visual>
      <origin xyz="${-small_rail_length / 2 + long_rail_width / 2} ${long_rail_offset} ${rail_height}" rpy="0 0 0"/>
      <geometry>
        <box size="${long_rail_width} ${long_rail_length} ${rail_thickness}"/>
      </geometry>
    </visual>
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="1.0"/>
      <inertia
          ixx="1" ixy="0.0" ixz="0.0"
          iyy="1" iyz="0.0"
          izz="1"/>
    </inertial>
  </link>

  <gazebo reference="long_rail_1">
    <material>Gazebo/DarkGrey</material>
  </gazebo>

  <joint name="rail_1_world" type="fixed">
    <parent link="world"/>
    <child link="long_rail_1"/>
    <origin xyz="-2.0 0.0 0.0" rpy="0.0 0.0 ${-pi/2}"/>
  </joint>

  <!-- Link: long_rail_2 -->
  <link name='long_rail_2'>
    <collision>
      <origin xyz="${small_rail_length / 2 - long_rail_width / 2} ${long_rail_offset} ${rail_height}" rpy="0 0 0"/>
      <geometry>
        <box size="${long_rail_width} ${long_rail_length} ${rail_thickness}"/>
      </geometry>
    </collision>
    <visual>
      <origin xyz="${small_rail_length / 2 - long_rail_width / 2} ${long_rail_offset} ${rail_height}" rpy="0 0 0"/>
      <geometry>
        <box size="${long_rail_width} ${long_rail_length} ${rail_thickness}"/>
      </geometry>
    </visual>
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="1.0"/>
      <inertia
          ixx="1" ixy="0.0" ixz="0.0"
          iyy="1" iyz="0.0"
          izz="1"/>
    </inertial>
  </link>
    
  <gazebo reference="long_rail_2">
    <material>Gazebo/DarkGrey</material>
  </gazebo>

  <joint name="rail_2_rail_1" type="fixed">
    <parent link="long_rail_1"/>
    <child link="long_rail_2"/>
    <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
  </joint>

  <link name='small_rail'>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${small_rail_width} ${small_rail_length} ${rail_thickness}"/>
      </geometry>
    </collision>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${small_rail_width} ${small_rail_length} ${rail_thickness}"/>
      </geometry>
    </visual>
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="1.0"/>
      <inertia
          ixx=".1" ixy="0.0" ixz="0.0"
          iyy="1" iyz="0.0"
          izz=".1"/>
    </inertial>
  </link>
    
  <gazebo reference="small_rail">
    <material>Gazebo/GreyTransparent</material>
  </gazebo>

  <joint name="small_long_joint" type="prismatic">
    <parent link="long_rail_2"/>
    <child link="small_rail"/>
    <origin xyz="0.0 0.0 ${rail_height + rail_thickness}" rpy="0.0 0.0 ${pi/2}"/>
    <axis xyz="1 0 0"/>
    <limit lower="${-long_rail_length / 2 + long_rail_offset + small_rail_width / 2}"
	      upper="${long_rail_length / 2 + long_rail_offset - small_rail_width / 2}"
        velocity="1"
        effort="100000"/>
  </joint>
  
  <link name="torso_base">
    <visual>
      <geometry>
        <mesh filename="package://nist_gear/robots/gantry/gantry_description/meshes/torso_base.dae" scale="2 2 2"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <mesh filename="package://nist_gear/robots/gantry/gantry_description/meshes/torso_base.dae" scale="2 2 2"/>
      </geometry>
    </collision>
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="1.0"/>
      <inertia
          ixx=".1" ixy="0.0" ixz="0.0"
          iyy="1" iyz="0.0"
          izz=".1"/>
    </inertial>
  </link>

  <gazebo reference="torso_base">
    <material>Gazebo/FlatBlack</material>
    <selfCollide>1</selfCollide>
  </gazebo>

  <joint name="torso_rail_joint" type="prismatic">
    <parent link="small_rail"/>
    <child link="torso_base"/>
    <origin xyz="0 0 ${torso_height}" rpy="${pi} ${pi} ${pi/2}"/>
	  <axis xyz="1 0 0"/>
	  <!--Add a 0.5m buffer for joint limits to avoid self-collisions-->
	  <limit lower="${-small_rail_length / 2 + .5}"
	    upper="${small_rail_length / 2 - .5}"
      velocity="1"
      effort="100000"/>
  </joint>

  <link name="torso_main">
    <visual>
      <geometry>
        <mesh filename="package://nist_gear/robots/gantry/gantry_description/meshes/torso_fixed_normals.dae" scale="2 2 2"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <mesh filename="package://nist_gear/robots/gantry/gantry_description/meshes/torso_fixed_normals.dae" scale="2 2 2"/>
      </geometry>
    </collision>
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="1.0"/>
      <inertia
        ixx=".1" ixy="0.0" ixz="0.0"
        iyy="1" iyz="0.0"
        izz=".1"/>
    </inertial>
    
    <gazebo>
      <material>
        <script>
          <uri>file://media/materials/scripts/gazebo.material</uri>
          <name>Gazebo/Grey</name>
        </script>
      </material>
    </gazebo>
  </link>

  <gazebo reference="torso_main">
    <selfCollide>1</selfCollide>
  </gazebo>

  <joint name="torso_base_main_joint" type="revolute">
    <parent link="torso_base"/>
      <child link="torso_main"/>
      <origin xyz="0 0 0" rpy="${pi} ${pi} 0"/>
      <axis xyz="0 0 1"/>
	    <limit lower="${-2 * pi}"
	      upper="${2 * pi}"
        velocity="${pi/4}"
        effort="100000"/>
  </joint>
  
  <link name="torso_tray">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="package://nist_gear/models/gantry_tray/mesh/gantry_tray.dae" scale="0.5 0.5 1.2"/>
      </geometry>
    </visual>
    <collision name="torso_tray_collision">
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="package://nist_gear/models/gantry_tray/mesh/gantry_tray.dae" scale="0.5 0.5 1.2"/>
      </geometry>
    </collision>
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="1.0"/>
      <inertia
        ixx="0.0408" ixy="0.0" ixz="0.0"
        iyy="0.02084" iyz="0.0"
        izz="0.0616"/>
    </inertial>
  </link>

  <!-- We have to make this a non-fixed joint otherwise it is not recofnized by Gazebo -->
  <!-- The limit will not allow the joint to move -->
  <joint name="torso_main_torso_tray_joint" type="revolute">
    <parent link="torso_main"/>
    <child link="torso_tray"/>
    <origin xyz="-0.017851 0.0 0.637444" rpy="0 0 ${pi/2}"/>
    <axis xyz="0 0 1"/>
    <limit velocity="6.5" effort="1000" lower="0" upper="0" />
  </joint>
  


  <!-- Attach arm to torso -->
  <xacro:ur10_robot parent="torso_main" prefix="${gantry_arm}">
    <origin xyz="0.51 0.0 1.3" rpy="0 1.57 0" />
  </xacro:ur10_robot>
      
  <!-- Load UR10 transmission -->
  <xacro:ur_arm_transmission prefix="${gantry_arm}" />
  
  <!-- Add vacuum gripper to the arm -->
  <xacro:property name="gantry_wrist_link" value="${gantry_arm}wrist_3_link" />
  
  <xacro:create_vacuum_gripper prefix="${gantry_arm}" wrist_link="${gantry_wrist_link}" arm_namespace="/ariac/gantry/arm">
    <origin xyz="0 0.1 0" rpy="${90 * 0.0174533} 0 0" />
    <grippable_model_types>
@[for model_name in possible_products]@
      <type>@(model_name)</type>
@[end for]@
    </grippable_model_types>
    <drops_info>
@[if drops]@
      <drops>
        <drop_regions>
@[for drop_region in drops['drop_regions']]@
          <drop_region>
            <min>@(' '.join(drop_region.min))</min>
            <max>@(' '.join(drop_region.max))</max>
            <destination>@(' '.join(drop_region.destination.xyz)) @(' '.join(drop_region.destination.rpy))</destination>
            <type>@(drop_region.type)</type>
@[if drop_region.frame != "world"]@
            <frame>@(drop_region.frame)</frame>
@[end if]@
          </drop_region>
@[end for]@
        </drop_regions>
      </drops>
@[end if]@
    </drops_info>
  </xacro:create_vacuum_gripper>



@[if options['enable_robot_camera']]@
  <gazebo reference="torso_main">
    <sensor name="robot_camera" type="depth">
		  <pose>0.42 0.42 1.1 0 ${pi/3} ${3*pi/2}</pose>
      <update_rate>20</update_rate>
        <camera>
          <horizontal_fov>2</horizontal_fov>
          <image>
            <width>848</width>
            <height>480</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.05</near>
            <far>5</far>
          </clip>
          <activation_topic>/ariac/sensor_enable</activation_topic>
          <!-- <plugin name="sensor_blackout_plugin" filename="libSensorBlackoutPlugin.so" >
            <activation_topic>/ariac/sensor_enable</activation_topic>
          </plugin> -->
        </camera>
        <plugin name="rgbd_camera" filename="libgazebo_ros_openni_kinect.so">
          <baseline>0.2</baseline>
          <alwaysOn>true</alwaysOn>
          <updateRate>1.0</updateRate>
          <cameraName>robot_camera</cameraName>
          <imageTopicName>robot_camera/color/image_raw</imageTopicName>
          <cameraInfoTopicName>robot_camera/color/camera_info</cameraInfoTopicName>
          <depthImageTopicName>robot_camera/depth/image_raw</depthImageTopicName>
          <depthImageInfoTopicName>robot_camera/depth/camera_info</depthImageInfoTopicName>
          <pointCloudTopicName>robot_camera/depth/points</pointCloudTopicName>
          <frameName>robot_camera_frame</frameName>
          <pointCloudCutoff>0.5</pointCloudCutoff>
          <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
          <distortionK1>0.00000001</distortionK1>
          <distortionK2>0.00000001</distortionK2>
          <distortionK3>0.00000001</distortionK3>
          <distortionT1>0.00000001</distortionT1>
          <distortionT2>0.00000001</distortionT2>
          <CxPrime>0</CxPrime>
          <Cx>0</Cx>
          <Cy>0</Cy>
          <focalLength>0</focalLength>
          <hackBaseline>0</hackBaseline>
        </plugin>
      </sensor>
    </gazebo>
@[end if]@

  <!--Transmissions for the rails and the torso-->
  <transmission name="small_long_transmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="small_long_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="small_long_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  
  <transmission name="torso_rail_transmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="torso_rail_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="torso_rail_motor">
      <mechanicalReduction>10</mechanicalReduction>
    </actuator>
  </transmission>
  
  <transmission name="torso_base_main_transmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="torso_base_main_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="torso_base_main_motor">
      <mechanicalReduction>10</mechanicalReduction>
    </actuator>
  </transmission>
  
  <transmission name="torso_main_torso_tray_transmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="torso_main_torso_tray_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="torso_main_tray_main_motor">
      <mechanicalReduction>10</mechanicalReduction>
    </actuator>
  </transmission>

      <!-- Defining the contact sensor for torso_tray -->
  <!-- <gazebo reference="torso_tray">
  <material>Gazebo/GreyTransparent</material>
    <sensor name="gantry_tray_contact" type="contact">
      <update_rate>1000.0</update_rate>
      <always_on>1</always_on>
      <plugin name="gantry_tray_plugin" filename="libROSAriacGantryTrayPlugin.so">
      <contact>
          <collision>torso_tray_collision</collision>
      </contact>
      <lock_models_service_name>/ariac/gantry_tray/lock_models</lock_models_service_name>
      <unlock_models_service_name>/ariac/gantry_tray/unlock_models</unlock_models_service_name>
      <contact_sensor_name>gantry_tray_contact</contact_sensor_name>
      <update_rate>20</update_rate>
      <alwaysOn>true</alwaysOn>
      <clear_tray_service_name>/ariac/gantry_tray/clear_tray</clear_tray_service_name>
      <frameName>gantry_contact_frame</frameName>  
      </plugin>
    </sensor>
  </gazebo> -->


  <!-- <gazebo>
      <plugin name="gantry_tray_plugin" filename="libROSAriacGantryTrayPlugin.so">
      <lock_models_service_name>/ariac/gantry_tray/lock_models</lock_models_service_name>
      <unlock_models_service_name>/ariac/gantry_tray/unlock_models</unlock_models_service_name>
      <contact_sensor_name>gantry_tray_contact</contact_sensor_name>
      <update_rate>20</update_rate>
      <alwaysOn>true</alwaysOn>
      <clear_tray_service_name>/ariac/gantry_tray/clear_tray</clear_tray_service_name>
      <frameName>gantry_contact_frame</frameName>  
      </plugin>
  </gazebo> 
  -->


  <!-- Defining the contact sensor for torso_tray -->
    <!--
  <gazebo reference="torso_tray">
    <sensor name="gantry_tray_contact" type="contact">
      <contact>
        <collision>torso_tray_collision</collision>
      </contact>
      <update_rate>1000.0</update_rate>
      <always_on>1</always_on>
      <plugin name="gantry_tray_plugin" filename="libROSAriacGantryTrayPlugin.so"/>
    </sensor>
    <material>Gazebo/GreyTransparent</material>
  </gazebo> 
  -->

  <gazebo>
    <static>false</static>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/ariac/gantry</robotNamespace>
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
      <legacyModeNS>true</legacyModeNS>
    </plugin>
  </gazebo>

</robot>
